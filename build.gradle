plugins {
    id 'maven-publish'
    id 'fabric-loom' version '1.4-SNAPSHOT'
//    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.breadmoirai.github-release" version "2.4.1"
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            name = "Testmod Client"
            source sourceSets.testmod
        }
    }
}

dependencies {
    // Game
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Fabric
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}")))

    // Test mod
    testmodImplementation sourceSets.main.output
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand(project.properties)
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

ext.changelog_last_section = { ->
    return new File("CHANGELOG.md").text.split('\n# ')[0]
}

if(project.hasProperty('release_type')) {
    tasks.register("publishMod") {
        dependsOn(build)
        finalizedBy(publish)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = project.maven_group
                artifactId = project.archives_base_name
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${System.getenv("GH_OWNER")}/${System.getenv("GH_REPO")}")
                credentials {
                    username = System.getenv("GH_OWNER")
                    password = System.getenv("GH_API_KEY")
                }
            }
        }
    }

}